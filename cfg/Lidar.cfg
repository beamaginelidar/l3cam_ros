#! /usr/bin/env python
PACKAGE = "l3cam_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Parameters
# gen.add(name, paramtype, level, description, default, min, max, edit_method)

# CHANGE_POINTCLOUD_COLOR
pointcloud_color_enum = gen.enum([gen.const("RAINBOW",              int_t, 0, "RAINBOW"),
                                  gen.const("RAINBOW_Z",            int_t, 1, "RAINBOW_Z"),
                                  gen.const("INTENSITY",            int_t, 2, "INTENSITY"),
                                  gen.const("RGB_FUSION",           int_t, 3, "RGB_FUSION"),
                                  gen.const("POLARIMETRIC_FUSION",  int_t, 4, "POLARIMETRIC_FUSION"),
                                  gen.const("POL_PROCESSED_FUSION", int_t, 5, "POL_PROCESSED_FUSION"),
                                  gen.const("THERMAL_FUSION",       int_t, 6, "THERMAL_FUSION"),
                                  gen.const("RGBT_FUSION",          int_t, 7, "RGBT_FUSION"),
                                  gen.const("ALLIED_NARROW_FUSION", int_t, 12, "ALLIED_NARROW_FUSION"),
                                  gen.const("ALLIED_WIDE_FUSION",   int_t, 13, "ALLIED_WIDE_FUSION"),
                                  gen.const("RGB_FE_FUSION",        int_t, 14, "RGB_FE_FUSION"),
                                  gen.const("THERMAL_FE_FUSION",    int_t, 15, "THERMAL_FE_FUSION")
                                 ],
                                 "Enum to set pointcloud color")
gen.add("pointcloud_color", int_t, 0, "Change pointcloud color", 0, 0, 15, edit_method=pointcloud_color_enum)
# CHANGE_POINTCLOUD_COLOR_RANGE
gen.add("pointcloud_color_range_minimum", int_t, 1, "Change pointcloud color range minimum", 0, 0, 300000)
gen.add("pointcloud_color_range_maximum", int_t, 2, "Change pointcloud color range maximum", 300000, 0, 300000)
# CHANGE_DISTANCE_RANGE
gen.add("distance_range_minimum", int_t, 3, "Change distance range minimum", 0, 0, 300000)
gen.add("distance_range_maximum", int_t, 4, "Change distance range maximum", 300000, 0, 300000)
# SET_BIAS_SHORT_RANGE
gen.add("bias_short_range", bool_t, 5, "Modifies the BIAS parameters to enable short range mode", True)
# ENABLE_AUTO_BIAS
gen.add("auto_bias", bool_t, 6, "Enable auto bias", True)
# CHANGE_BIAS_VALUE
gen.add("bias_value_right", int_t, 7, "Change bias value right", 1580, 600, 3500)
gen.add("bias_value_left", int_t, 8, "Change bias value left", 1380, 600, 3500)
# CHANGE_AUTOBIAS_VALUE
gen.add("autobias_value_right", int_t, 9, "Change autobias value right", 50, 0, 100)
gen.add("autobias_value_left", int_t, 10, "Change autobias value left", 50, 0, 100)
# CHANGE_STREAMING_PROTOCOL
lidar_streaming_protocol_enum = gen.enum([gen.const("protocol_raw_udp", int_t, 0, "Raw UDP"),
                                                    gen.const("protocol_gstreamer", int_t, 1, "GStreamer")],
                                                    "Enum to set lidar streaming protocol")
gen.add("lidar_streaming_protocol", int_t, 11, "Change lidar RTPS pipeline", 0, 0, 1, edit_method=lidar_streaming_protocol_enum)
# CHANGE_RTSP_PIPELINE
gen.add("lidar_rtsp_pipeline", str_t, 12, "Lidar RTSP pipeline", "")

exit(gen.generate(PACKAGE, "l3cam_ros", "Lidar"))
